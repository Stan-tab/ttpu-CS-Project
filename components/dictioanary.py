from aiogram import html

sentences = {
    "en": {
        "greeting": f"Hello $|.\nWelcome to {html.italic('funny')} audio bot üòé.\nI hope you will love it ‚ù§Ô∏è.\nIf you want to know how bot works enter /help",
        "help": f"This bot is made to entertain you ü§™.\nYou can send audio to me and i save it for all users üòç.\n Btw, you can call me in any chat and i will show audio that i have üòâ.\n Let's begin üéâ.",
        "myAudio":"Show my audioüéß",
        "caption": {
            "name":"Name",
            "tags":"Tagsüé¨",
            "uses":"Usesüìà",
        },
        "set": {
            "editName":"Change the name",
            "addTag":"Add tags",
        },
        "editName":"Enter the new name:",
        "addTag":"Add tags\nExample:\nfun, modern, cool",
        "errExist": "We already have this",
        "errNoAudio": "Sorry, we could'nt find your audios\nBut you can upload if you wish",
        "showAudios": "Your audios",
    },
    "ru": {
        "greeting": f"–ü—Ä–∏–≤–µ—Ç $|.\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ {html.italic('–∑–∞–±–∞–≤–Ω—ã–π')} –∞—É–¥–∏–æ–±–æ—Ç üòé.\n–ù–∞–¥–µ—é—Å—å, –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏—Ç—Å—è ‚ù§Ô∏è\n–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å, –∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–æ—Ç, –≤–≤–µ–¥–∏—Ç–µ /help",
        "help": f"–≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω, —á—Ç–æ–±—ã —Ä–∞–∑–≤–ª–µ–∫–∞—Ç—å –≤–∞—Å ü§™.\n–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –º–Ω–µ –∞—É–¥–∏–æ, –∏ —è —Å–æ—Ö—Ä–∞–Ω—é –µ–≥–æ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π üòç.\nTa–∫–∂–µ, –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–∑–≤–æ–Ω–∏—Ç—å –º–Ω–µ –≤ –ª—é–±–æ–π —á–∞—Ç, –∏ —è –ø–æ–∫–∞–∂—É –≤–∞–º –º–æ–∏ –∞—É–¥–∏–æ üòâ.\n–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω—ë–º üéâ.",
        "myAudio":"–ü–æ–∫–∞–∑–∞—Ç—å –º–æ–µ –∞—É–¥–∏–æüéß",
        "caption": {
            "name":"–ò–º—è",
            "tags":"–¢—ç–≥–∏üé¨",
            "uses":"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–πüìà",
        },
        "set": {
            "editName":"–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è",
            "addTag":"–î–æ–±–∞–≤–∏—Ç—å —Ç–µ–≥–∏",
        },
        "editName":"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è",
        "addTag":"–î–æ–±–∞–≤–∏—Ç—å —Ç–µ–≥–∏\n–ü—Ä–∏–º–µ—Ä:\n–≤–µ—Å–µ–ª—ã–π, —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ, –∫—Ä—É—Ç–æ",
        "errExist": "–£ –Ω–∞—Å —É–∂–µ –µ—Å—Ç—å —ç—Ç–æ –∞—É–¥–∏–æ",
        "errNoAudio": "–ò–∑–≤–∏–Ω–∏—Ç–µ, –º—ã –Ω–µ —Å–º–æ–≥–ª–∏ –Ω–∞–π—Ç–∏ –≤–∞—à–∏ –∞—É–¥–∏–æ–∑–∞–ø–∏—Å–∏.\n–ù–æ –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏—Ö, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ.",
        "showAudios": "–í–∞—à–∏ –∞—É–¥–∏–æ",
    },
}


def useSentences(sent, inputArray):
    dividedSentence = sent.split("$|")
    dsLength = len(dividedSentence)
    if dsLength - 1 != len(inputArray):
        raise Exception("Too many or not enough input words")
    for i in range(len(inputArray)):
        dividedSentence.insert(i + 1, inputArray[i])
    return "".join(dividedSentence)
